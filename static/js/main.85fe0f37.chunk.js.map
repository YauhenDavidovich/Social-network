{"version":3,"sources":["reportWebVitals.ts","api/api.ts","redux/profile-reducer.ts","redux/dialog-reducer.ts","redux/sidebar-reducer.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","assets/user-photo.png","components/Users/Users.tsx","assets/bars.svg","components/common/Preloader/Preloader.tsx","redux/users-selector.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/LoginForm.tsx","App.tsx","index.tsx","components/Navbar/Navbar.module.css","components/Dialogs/Diaologs.module.css","components/Users/Users.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/common/Preloader/Preloader.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","api","pageNumber","pageSize","get","response","data","userId","id","post","delete","status","put","email","password","rememberMe","ADD_POST","SET_USER_PROFILE","SET_STATUS","initialState","posts","message","likesCount","newPostsText","profile","fullName","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","photos","small","large","addPostAC","postText","type","setStatus","getUserProfile","dispatch","profileReducer","state","action","newPost","dialogs","name","messages","dialogsReducer","body","sidebarReducer","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_IN_PROGRESS","SET_USERS","FOLLOW","UNFOLLOW","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","users","totalUsersCount","currentPage","isFetching","followingInProgress","setUsers","setCurrentPage","setTotalUsersCount","count","toggleIsFetching","toggleFollowingInProgress","usersReducer","map","u","userID","followed","filter","SET_USER_DATA","login","isAuth","setAuthUserData","payload","getAuthUserData","resultCode","authReducer","SET_INITIALISED","initialised","appReducer","rootReducer","combineReducers","profilePage","dialogPage","sidebar","auth","app","store","createStore","applyMiddleware","thunkMiddleware","window","Navbar","className","styles","nav","item","to","activeClassName","active","Music","News","Settings","DialogItem","props","path","style","dialog","Message","AddMessageForm","useDispatch","formik","useFormik","initialValues","validate","values","errors","length","onSubmit","resetForm","Grid","container","justify","xs","handleSubmit","FormControl","FormGroup","TextField","label","margin","variant","onChange","handleChange","value","onBlur","handleBlur","touched","color","Button","Dialogs","dialogElements","d","messageElements","m","dialogs__items","mapStateToProps","withAuthRedirect","Component","connect","restProps","compose","Users","pagesCount","Math","ceil","pages","i","push","p","selectedPage","onClick","e","onPageChanged","src","userPhoto","disabled","some","unfollow","follow","Preloader","preloader","getUsers","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","items","this","requestUsers","React","totalCount","ProfileStatus","useState","editMode","setEditMode","useEffect","onDoubleClick","currentTarget","autoFocus","updateStatus","ProfileInfo","description__block","Post","AddNewPost","MyPostsContainer","addPost","postElements","posts__block","Profile","ProfileContainer","match","params","usrID","String","currentUserId","history","getStatus","withRouter","Header","header","loginBlock","logout","a","Login","isLoggedIn","useSelector","test","alert","catch","error","console","log","FormLabel","href","target","FormControlLabel","control","Checkbox","LoginForm","App","initialiseApp","render","DialogsContainer","component","AppContainer","promise","Promise","all","MainApp","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.85fe0f37.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from \"axios\";\r\nimport {ProfileResponseType} from \"../redux/profile-reducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '7182e7e1-cf7b-49da-8e89-52ae747000d8'\r\n    }\r\n})\r\n\r\n\r\n\r\nexport const api = {\r\n    getUsers(pageNumber = 1, pageSize = 10) {\r\n        return instance.get(`/users?page=${pageNumber}&count=${pageSize}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    checkAuth(){\r\n        return instance.get(`/auth/me`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    getProfile(userId:string){\r\n        return instance.get<ProfileResponseType>(`profile/${userId}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    follow(id:number){\r\n        return instance.post(`follow/${id}`, {}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    unfollow(id:number){\r\n        return instance.delete(`follow/${id}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    getStatus(id:string){\r\n        return instance.get(`profile/status/${id}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    updateStatus(status: any){\r\n        return instance.put(`profile/status`, {status: status}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean){\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`, )\r\n    },\r\n}\r\n\r\n\r\n","import {ActionsType} from \"./redux-store\";\r\nimport {api} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\nconst SET_STATUS = 'SET-STATUS';\r\n\r\n\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type ContactsType = {\r\n    facebook?: string\r\n    website?: string\r\n    vk?: string\r\n    twitter?: string\r\n    instagram?: string\r\n    youtube?: string\r\n    github?: string\r\n    mainLink?: string\r\n}\r\n\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ProfileResponseType ={\r\n    userId: number\r\n    fullName: string\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    photos: PhotosType\r\n}\r\n\r\n\r\n\r\ntype InitialSTateType = {\r\n    profile: ProfileResponseType\r\n    newPostsText:string,\r\n    posts: PostType[],\r\n    status: string\r\n}\r\n\r\nconst initialState:InitialSTateType = {\r\n    posts:\r\n        [{id: 1, message: \"Hi\", likesCount: 4},\r\n            {id: 2, message: \"Hey\", likesCount: 14},\r\n            {id: 3, message: \"Good day!\", likesCount: 24},\r\n            {id: 4, message: \"Yo!\", likesCount: 5},] as Array<PostType>,\r\n    newPostsText: \"type yor post here\",\r\n    profile: {\r\n        userId: 0,\r\n        fullName: \"\",\r\n        aboutMe: \"\",\r\n        contacts: { facebook: \"\",\r\n            website: \"\",\r\n            vk: \"\",\r\n            twitter: \"\",\r\n            instagram: \"\",\r\n            youtube: \"\",\r\n            github: \"\",\r\n            mainLink: \"\",},\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: \"\",\r\n        photos: { small: \"\",\r\n            large: \"\",}\r\n    },\r\n    status: '',\r\n}\r\n\r\n\r\n\r\nexport type PostsInitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state: PostsInitialStateType = initialState, action: ActionsType): PostsInitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            const newPost: PostType = {\r\n                id: 5,\r\n                message: action.postText,\r\n                likesCount: 3\r\n            }\r\n            return {\r\n\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostsText: ''\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostAC = (postText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        postText: postText\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileResponseType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile: profile\r\n    } as const\r\n}\r\n\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status: status\r\n    } as const\r\n}\r\n\r\n\r\nexport const getUserProfile = (userId:string) => (dispatch:Dispatch<ActionsType>)=> {\r\n    api.getProfile(userId).then(data => {\r\n        dispatch(setUserProfile(data))\r\n    })\r\n}\r\n\r\nexport const getStatus = (userId:string) => (dispatch:Dispatch<ActionsType>)=> {\r\n    debugger\r\n    api.getStatus(userId).then(data => {\r\n        dispatch(setStatus(data))\r\n    })\r\n}\r\n\r\nexport const updateStatus = (status: string) => (dispatch:Dispatch<ActionsType>)=> {\r\n    api.updateStatus(status).then(data => {\r\n        if(data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    })\r\n}\r\n\r\nexport default profileReducer\r\n","import {ActionsType} from \"./redux-store\";\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs:\r\n        [{id: 1, name: \"Peter\"},\r\n            {id: 2, name: \"Olga\"},\r\n            {id: 3, name: \"Jack\"},\r\n            {id: 4, name: \"Tomas\"},] as Array<DialogType>,\r\n    messages:\r\n        [{id: 1, message: \"Hi!\"},\r\n            {id: 2, message: \"Hi!\"},\r\n            {id: 3, message: \"Whatsup!\"},\r\n            {id: 4, message: \"Hey!\"},] as Array<MessageType>,\r\n}\r\n\r\nexport type DialogInitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state: DialogInitialStateType = initialState, action: ActionsType): DialogInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"SEND-MESSAGE\":\r\n            let body = action.message\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = (message: string) => {\r\n    return {\r\n        type: \"SEND-MESSAGE\",\r\n        message: message\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer\r\n","import {ActionsType} from \"./redux-store\";\r\n\r\n\r\nexport type SidebarType = {}\r\nlet initialState = {}\r\n\r\nconst sidebarReducer = (state: SidebarType = initialState, action: ActionsType) => {\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer\r\n","import {ActionsType} from \"./redux-store\";\r\nimport {api} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\";\r\nconst TOGGLE_FOLLOWING_IN_PROGRESS = \"TOGGLE-FOLLOWING-IN-PROGRESS\";\r\nconst SET_USERS = \"SET-USERS\";\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_CURRENT_PAGE = \"SET-CURRENT-PAGE\";\r\nconst SET_USERS_TOTAL_COUNT = \"SET-USERS-TOTAL-COUNT\";\r\n\r\n\r\nexport type UserType = {\r\n    id: number\r\n    photos: UserPhoto\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: UsersLocation\r\n}\r\n\r\ntype UserPhoto = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\ntype UsersLocation = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nexport type UsersInitialStateType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: number[]\r\n\r\n}\r\n\r\n\r\nconst initialState: UsersInitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state: UsersInitialStateType = initialState, action: ActionsType): UsersInitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case SET_USERS :\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case SET_CURRENT_PAGE :\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_USERS_TOTAL_COUNT :\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        case TOGGLE_IS_FETCHING :\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_FOLLOWING_IN_PROGRESS :\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userID: number) => ({type: \"FOLLOW\", userID}) as const\r\nexport const unfollowSuccess = (userID: number) => ({type: \"UNFOLLOW\", userID}) as const\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users}) as const\r\nexport const setCurrentPage = (currentPage: number) => ({\r\n    type: SET_CURRENT_PAGE, currentPage: currentPage\r\n}) as const\r\n\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_USERS_TOTAL_COUNT, count: totalUsersCount\r\n}) as const\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n}) as const\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_FOLLOWING_IN_PROGRESS,\r\n    isFetching,\r\n    userId\r\n}) as const\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: any) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(currentPage))\r\n        api.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const follow = (userId: number) => {\r\n    return (dispatch:Dispatch<ActionsType>) => {\r\n        dispatch(toggleFollowingInProgress(true, userId));\r\n        api.follow(userId).\r\n        then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(followSuccess(userId))\r\n            }\r\n            dispatch(toggleFollowingInProgress(false, userId))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const unfollow =(userId: number) => {\r\n\r\n    return (dispatch:Dispatch<ActionsType>) => {\r\n        dispatch(toggleFollowingInProgress(true, userId));\r\n        api.unfollow(userId).then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n            }\r\n            dispatch(toggleFollowingInProgress(false, userId))\r\n        })\r\n    }\r\n}\r\nexport default usersReducer\r\n","import {ActionsType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {api} from \"../api/api\";\r\n\r\nconst SET_USER_DATA = 'SET-USER-DATA';\r\n\r\n\r\nconst initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuth: false\r\n}\r\n\r\nexport type UsersAuthDataType = typeof initialState;\r\n\r\n\r\nexport type AuthInitialStateType = typeof initialState\r\n\r\nconst authReducer = (state: AuthInitialStateType = initialState, action: ActionsType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (payload: UsersAuthDataType) => ({type: SET_USER_DATA, payload}) as const\r\n\r\nexport const getAuthUserData = () => (dispatch: Dispatch<any>) => {\r\n    return api.checkAuth()\r\n        .then(response => {\r\n                debugger\r\n                if (response.resultCode === 0) {\r\n                    debugger\r\n                    let {email, id, login} = response.data;\r\n                    debugger\r\n                    dispatch(setAuthUserData({id, login, email, isAuth: true}))\r\n                }\r\n            }\r\n        )\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch<any>) => {\r\n\r\n    api.login(email, password, rememberMe)\r\n        .then(response => {\r\n                debugger\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(getAuthUserData())\r\n                } else (\r\n                    alert(response.data.messages)\r\n                )\r\n            }\r\n        )\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console');\r\n            alert(error)\r\n            console.log('Error: ', {...e})\r\n        })\r\n}\r\n\r\nexport const logout = () => async (dispatch: Dispatch<any>) => {\r\n    let data = await api.logout()\r\n    if (data.data.resultCode === 0) {\r\n        dispatch(setAuthUserData({id: null, email: null, login: null, isAuth: false}))\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer\r\n","import {ActionsType} from \"./redux-store\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst SET_INITIALISED = 'SET_INITIALISED';\r\n\r\nexport type InitialisedType = {\r\n    initialised: boolean,\r\n}\r\n\r\nconst initialState:InitialisedType = {\r\n    initialised: false\r\n}\r\n\r\nexport type AppInitialStateType = typeof initialState\r\n\r\nconst appReducer = (state: AppInitialStateType = initialState, action: ActionsType): InitialisedType => {\r\n    switch (action.type) {\r\n        case SET_INITIALISED:\r\n            return {\r\n                ...state,\r\n                initialised: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setInitialised  = (payload: boolean) => {\r\n    return {\r\n        type: SET_INITIALISED, payload\r\n    } as const\r\n}\r\n\r\nexport const initialiseApp = () => (dispatch: Dispatch<any>) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(setInitialised(true))\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\nexport default appReducer\r\n","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {addPostAC, setStatus, setUserProfile} from \"./profile-reducer\";\r\nimport dialogsReducer, {sendMessageAC} from \"./dialog-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer, {\r\n    followSuccess,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowingInProgress,\r\n    toggleIsFetching,\r\n    unfollowSuccess\r\n} from \"./users-reducer\";\r\nimport authReducer, {setAuthUserData} from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport appReducer, {setInitialised} from \"./app-reducer\";\r\n\r\n\r\ntype AddPostActionType = ReturnType<typeof addPostAC>\r\ntype SendMessageActionType = ReturnType<typeof sendMessageAC>\r\ntype SetUsersActionType = ReturnType<typeof setUsers>\r\ntype FollowUserActionType = ReturnType<typeof followSuccess>\r\ntype UnFollowUserActionType = ReturnType<typeof unfollowSuccess>\r\ntype SetCurrentPageActionType = ReturnType<typeof setCurrentPage>\r\ntype SetUsersTotalCountActionType = ReturnType<typeof setTotalUsersCount>\r\ntype ToggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>\r\ntype SetUserProfileActionType = ReturnType<typeof setUserProfile>\r\ntype SetUserDataActionType = ReturnType<typeof setAuthUserData>\r\ntype ToggleIsFollowingInProgressActionType = ReturnType<typeof toggleFollowingInProgress>\r\ntype SetStatusActionType = ReturnType<typeof setStatus>\r\ntype SetInitialiseActionType = ReturnType<typeof setInitialised>\r\n\r\n\r\nexport type ActionsType =\r\n    AddPostActionType\r\n    | SendMessageActionType\r\n    | SetUsersActionType\r\n    | FollowUserActionType\r\n    | UnFollowUserActionType\r\n    | SetCurrentPageActionType\r\n    | SetUsersTotalCountActionType\r\n    | ToggleIsFetchingActionType\r\n    | SetUserProfileActionType\r\n    | SetUserDataActionType\r\n    | ToggleIsFollowingInProgressActionType\r\n    | SetStatusActionType\r\n    | SetInitialiseActionType\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n        profilePage: profileReducer,\r\n        dialogPage: dialogsReducer,\r\n        sidebar: sidebarReducer,\r\n        users: usersReducer,\r\n        auth: authReducer,\r\n        app: appReducer\r\n}\r\n)\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store\r\nexport default store\r\n\r\n","import React from 'react';\r\nimport styles from './Navbar.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={styles.nav}>\r\n            <div className={styles.item}>\r\n                <NavLink to=\"/profile\" activeClassName={styles.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={styles.active}>Messages</NavLink>\r\n            </div><div className={styles.item}>\r\n                <NavLink to=\"/users\" activeClassName={styles.active}>Users</NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to=\"/music\" activeClassName={styles.active}>Music</NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to=\"/news\" activeClassName={styles.active}>News</NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                <NavLink to=\"/settings\" activeClassName={styles.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport style from './Diaologs.module.css'\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Music;","import React from 'react';\r\nimport style from './Diaologs.module.css'\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default News;","import React from 'react';\r\nimport style from './Diaologs.module.css'\r\n\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;","import React from 'react';\r\nimport style from './../Diaologs.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport type DialogItemProps = {\r\n    name: string,\r\n    id: number\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemProps> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={style.dialog + ' ' + style.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport style from './../Diaologs.module.css'\r\n\r\nexport type MessageItemProps = {\r\n    message: string,\r\n    id: number\r\n}\r\n\r\nconst Message: React.FC<MessageItemProps> = (props) => {\r\n    return (\r\n        <div className={style.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport style from './Diaologs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\nimport {sendMessageAC} from \"../../redux/dialog-reducer\";\r\n\r\n\r\nconst Dialogs = (props:any) => {\r\n    let state = props.dialogPage\r\n    let dialogElements = state.dialogs.map((d: { id: number; name: string; }) => <DialogItem id={d.id} name={d.name}/>)\r\n    let messageElements = state.messages.map((m: { id: number; message: string; }) => <Message id={m.id} message={m.message}/>)\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogs__items}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div>{messageElements}</div>\r\n                <div>\r\n                    <AddMessageForm/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\ntype FormikErrorType = {\r\n    message?: string\r\n}\r\n\r\nexport const AddMessageForm = () => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if(!values.message) {\r\n                errors.message = 'Required';\r\n            } else if (values.message.length > 200) {\r\n                errors.message = 'Sorry, message limits 200 symbols';\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(sendMessageAC(values.message));\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"message\"\r\n                            margin=\"normal\"\r\n                            variant=\"filled\"\r\n                            name=\"message\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.message}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.message && formik.errors.message && <div style={{color: 'red'}}>{formik.errors.message}</div>}\r\n                        <Button type={'submit'} variant={'contained'} color={'secondary'}>Send</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\nexport default Dialogs;\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType=> {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n    function RedirectComponent(props: MapStateToPropsType) {\r\n        let {isAuth,...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n","import React from 'react';\r\nimport style from './Diaologs.module.css'\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {DialogInitialStateType} from \"../../redux/dialog-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {getUserProfile} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogPage: DialogInitialStateType\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStatePropsType=> {\r\n    return {\r\n        dialogPage: state.dialogPage\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile}),\r\n    withAuthRedirect)\r\n(Dialogs)\r\n","export default __webpack_public_path__ + \"static/media/user-photo.38481ea5.png\";","import React from \"react\";\r\nimport styles from './Users.module.css';\r\nimport userPhoto from \"../../assets/user-photo.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Users = (props: any) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    debugger\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p ? styles.selectedPage : ''}\r\n                             onClick={(e) => {\r\n                                 props.onPageChanged(p)\r\n                             }}\r\n                >{p}</span>\r\n            })}\r\n\r\n        </div>\r\n        {\r\n            props.users.map((u: { id: string | number | null | undefined; photos: { small: string | null | undefined; }; followed: any; name: React.ReactNode; status: React.ReactNode; }) =>\r\n\r\n                <div key={u.id}>\r\n\r\n                 <span>\r\n                     <NavLink to={`/profile/${u.id}`}><img src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                                                           className={styles.userPhoto}/></NavLink>\r\n                     <div>{u.id}</div>\r\n                     <div>{\r\n                         u.followed\r\n\r\n                             ? <button disabled={\r\n                                 props.followingInProgress.some((id: string | number) => id === u.id)}\r\n                                       onClick={() => {\r\n                                           {\r\n                                               props.unfollow(u.id)\r\n                                           }\r\n                                       }}>Unfollow</button>\r\n                             : <button\r\n                                 disabled={props.followingInProgress.some((id: string | number) => id === u.id)}\r\n                                 onClick={() => {\r\n                                     {props.follow(u.id)}\r\n                                 }}>Follow</button>\r\n                     }</div>\r\n                 </span>\r\n                    <span>\r\n                     <span>\r\n                         <div>{u.name}</div>\r\n                         <div>{u.status}</div>\r\n                     </span>\r\n                     <span>\r\n                         <div>{'______________'}</div>\r\n\r\n                     </span>\r\n                 </span>\r\n                </div>)\r\n        }\r\n    </div>\r\n}\r\n\r\n\r\nexport default Users\r\n","export default __webpack_public_path__ + \"static/media/bars.a2e35dd5.svg\";","import React from 'react'\r\nimport preloader from '../../../assets/bars.svg'\r\nimport style from './Preloader.module.css'\r\nconst Preloader = (props:any) =>{\r\n    return (\r\n        <div className={style.preloader}>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader\r\n","import {AppRootStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state: AppRootStateType) => {\r\n    return state.users.users\r\n}\r\n\r\nexport const getPageSize = (state: AppRootStateType) => {\r\n    return state.users.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppRootStateType) => {\r\n    return state.users.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppRootStateType) => {\r\n    return state.users.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppRootStateType) => {\r\n    return state.users.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppRootStateType) => {\r\n    return state.users.followingInProgress\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {\r\n    setCurrentPage,\r\n    setUsers,\r\n    setTotalUsersCount,\r\n    toggleIsFetching,\r\n    UserType, toggleFollowingInProgress, requestUsers, follow, unfollow\r\n} from \"../../redux/users-reducer\";\r\nimport styles from \"./Users.module.css\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {api} from \"../../api/api\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selector\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number)=> void\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nexport type UsersType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersType> {\r\n    componentDidMount() {\r\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true)\r\n        debugger\r\n        api.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(data.items)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   toggleFollowingInProgress={this.props.toggleFollowingInProgress}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleIsFetching,\r\n    toggleFollowingInProgress,\r\n    requestUsers\r\n})(UsersContainer);\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport styles from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status:string\r\n    updateStatus: (status:string) => void\r\n}\r\n\r\nconst ProfileStatus = (props: ProfileStatusPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n\r\n    return <div>\r\n    {!editMode && <div>\r\n        <span onDoubleClick={activateEditMode}>{status || \"undefined status\"}</span>\r\n    </div>}\r\n    {editMode && <div>\r\n        <input onChange={onStatusChange} autoFocus={true} onBlur={deActivateEditMode} value={status}/></div>}\r\n</div>\r\n\r\n}\r\n\r\n// class ProfileStatus extends React.Component<any, any> {\r\n//     state = {\r\n//         editMode: false,\r\n//         status: this.props.status\r\n//\r\n//     }\r\n//     activateEditMode = () => {\r\n//         this.setState({\r\n//                 editMode: true\r\n//             }\r\n//         )\r\n//     }\r\n//     deActivateEditMode = () => {\r\n//\r\n//         this.setState({\r\n//             editMode: false\r\n//             }\r\n//         )\r\n//         this.props.updateStatus(this.state.status)\r\n//     }\r\n//\r\n//     componentDidUpdate(prevProps: any, prevState: any) {\r\n//         if (prevProps.status !== this.props.status) {\r\n//             this.setState({\r\n//                     status: this.props.status\r\n//                 }\r\n//             )\r\n//         }\r\n//     }\r\n//\r\n//     onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//         this.setState({\r\n//             status: e.currentTarget.value\r\n//         })\r\n//     }\r\n//\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {!this.state.editMode && <div>\r\n//                     <span onDoubleClick={this.activateEditMode}>{this.props.status || \"undefined status\"}</span>\r\n//                 </div>}\r\n//                 {this.state.editMode && <div>\r\n//                     <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deActivateEditMode} value={this.state.status}/></div>}\r\n//             </div>\r\n//         );\r\n//     }\r\n// };\r\n\r\nexport default ProfileStatus;\r\n","import React from 'react';\r\nimport styles from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/user-photo.png\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\n\r\nconst ProfileInfo = (props: any) => {\r\n    debugger\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    debugger\r\n    return (\r\n        <div>\r\n            <div className={styles.description__block}>\r\n\r\n                <img src={props.profile.photos.large ? props.profile.photos.large : userPhoto}/>\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                <div>{props.profile.fullName}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport style from \"./Post.module.css\";\r\n\r\ntype PostTypeProps = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostTypeProps> = (props) => {\r\n    return (\r\n        <div className={style.item}><img\r\n            src='https://vokrug-tv.ru/pic/news/5/f/c/2/rsz300x300_5fc2879465129c11d65749ab9e3db7cc.jpg'></img>{props.message}\r\n            <div><span>Likes: {props.likesCount}</span></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport style from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {sendMessageAC} from \"../../../redux/dialog-reducer\";\r\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\nimport {addPostAC} from \"../../../redux/profile-reducer\";\r\n\r\n\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\nexport const MyPosts = (props:any) => {\r\n\r\n    let postElements = props.posts.map( (p:PostType) => <Post key = {p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPostText(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={style.posts__block}>\r\n            <h3>My posts</h3>\r\n            <AddNewPost/>\r\n            <div className={style.posts}>\r\n                { postElements }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype FormikErrorType = {\r\n    post?: string\r\n}\r\n\r\nexport const AddNewPost = () => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if(!values.post) {\r\n                errors.post = 'Required';\r\n            } else if (values.post.length > 200) {\r\n                errors.post = 'Sorry, post limits 200 symbols';\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(addPostAC(values.post));\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"post\"\r\n                            margin=\"normal\"\r\n                            variant=\"filled\"\r\n                            name=\"post\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.post}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.post && formik.errors.post && <div style={{color: 'red'}}>{formik.errors.post}</div>}\r\n                        <Button type={'submit'} variant={'contained'} color={'secondary'}>Post</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React from 'react';\r\n\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC, PostsInitialStateType} from \"../../../redux/profile-reducer\";\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostsText: string) => void\r\n}\r\n\r\n\r\nlet mapStateTopProps = (state: AppRootStateType): PostsInitialStateType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostsText: state.profilePage.newPostsText,\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostsText: string) => {\r\n            dispatch(addPostAC(newPostsText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateTopProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props:any) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileResponseType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile:ProfileResponseType\r\n    status:string\r\n    currentUserId: number | null\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus:(status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    usrID: string\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.match.params.usrID\r\n        if (!userId) {\r\n            debugger\r\n            userId = String(this.props.currentUserId!)\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    currentUserId: state.auth.id,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus} ),\r\n    withRouter,\r\n    withAuthRedirect)\r\n(ProfileContainer)\r\n","import React from 'react';\r\nimport styles from './Header.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst Header = (props: any) => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <img src=\"https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/07/door-company-logo.jpg\"/>\r\n            <div className={styles.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\n\r\nexport default Header;\r\n","import React, {useEffect} from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout, setAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {api} from \"../../api/api\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nfunction HeaderContainer(props: any) {\r\n\r\n    return (\r\n        <Header {...props}/>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n\r\n        isAuth: state.auth.isAuth, login: state.auth.login\r\n\r\n})\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, {setAuthUserData, logout})(HeaderContainer);\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {useFormik} from \"formik\";\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {login} from \"../../redux/auth-reducer\";\r\n\r\nconst LoginForm = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>\r\n        state.auth.isAuth)\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (<div>\r\n            <h1>Login</h1>\r\n            <Login/>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>\r\n        state.auth.isAuth)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n\r\n            if(!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(login(values.email, values.password, values.rememberMe))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name=\"email\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.email}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            name=\"password\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.password}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                name=\"rememberMe\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\nexport default LoginForm;\r\n","import React, {Component, ComponentType} from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {BrowserRouter, HashRouter, Route, withRouter} from \"react-router-dom\";\r\nimport Music from \"./components/Music/Music\";\r\nimport News from \"./components/News/News\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginForm from \"./components/Login/LoginForm\";\r\nimport {compose} from \"redux\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initialiseApp} from \"./redux/app-reducer\";\r\nimport store, {AppRootStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\n\r\n\r\nclass App extends Component<any, any> {\r\n    componentDidMount() {\r\n        // @ts-ignore\r\n        this.props.initialiseApp()\r\n    }\r\n\r\n    render() {\r\n\r\n        // // @ts-ignore\r\n        if(!this.props.initialised){ return <Preloader/>}\r\n        return (\r\n            <BrowserRouter>\r\n                <div className='app-wrapper'>\r\n                    <HeaderContainer/>\r\n                    <Navbar/>\r\n                    <div className='app-wrapper-content'>\r\n                        <Route path={'/profile/:usrID?'} render={() => <ProfileContainer/>}/>\r\n                        <Route path={'/users'} render={() => <UsersContainer/>}/>\r\n                        <Route path={'/dialogs'} render={() => <DialogsContainer/>}/>\r\n                        <Route path={'/news'} component={() => <News/>}/>\r\n                        <Route path={'/music'} component={() => <Music/>}/>\r\n                        <Route path={'/settings'} component={() => <Settings/>}/>\r\n                        <Route path={'/login'} component={() => <LoginForm/>}/>\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    initialised: boolean\r\n}\r\n\r\nconst mapStateToProps = (state:AppRootStateType):MapStateToPropsType =>({\r\n    initialised: state.app.initialised\r\n})\r\nlet AppContainer = compose<ComponentType>(withRouter, connect(mapStateToProps, {initialiseApp}))(App);\r\n\r\n\r\nconst MainApp = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\nexport default MainApp\r\n","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ReactDOM from \"react-dom\";\r\nimport store from \"./redux/redux-store\";\r\nimport App from \"./App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport MainApp from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n                <MainApp/>\r\n            </Provider>\r\n        </React.StrictMode>\r\n    </HashRouter>\r\n    , document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__37Xrl\",\"item\":\"Navbar_item__1Zr7m\",\"active\":\"Navbar_active__1YIFL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Diaologs_dialogs__j6jbx\",\"dialogs__items\":\"Diaologs_dialogs__items__2RU2Y\",\"dialog\":\"Diaologs_dialog__32Ltr\",\"active\":\"Diaologs_active__2Tpwp\",\"messages\":\"Diaologs_messages__2uU_I\",\"message\":\"Diaologs_message__1Wurd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__r9MII\",\"selectedPage\":\"Users_selectedPage__1dL59\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts__block\":\"MyPosts_posts__block__1VN4w\",\"posts\":\"MyPosts_posts__2lhSZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3Ucbf\",\"loginBlock\":\"Header_loginBlock__1BkQ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__Cst70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description__block\":\"ProfileInfo_description__block__RDn6H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__w9ifP\",\"active\":\"Post_active__2fyV0\"};"],"sourceRoot":""}